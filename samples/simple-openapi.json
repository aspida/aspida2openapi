{
  "openapi": "3.1.0",
  "info": {
    "title": "aspida to OpenAPI",
    "version": "v0.0"
  },
  "servers": [
    {
      "url": "/api"
    }
  ],
  "paths": {
    "samples/simple/dummy/2": {
      "put": {
        "tags": [
          "dummy",
          "2"
        ],
        "parameters": []
      }
    },
    "samples/simple/dummy/{a_1}/simple": {
      "put": {
        "tags": [
          "dummy"
        ],
        "parameters": [
          {
            "name": "a_1",
            "in": "path",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ]
      }
    },
    "samples/simple/dummy/{id}/content": {
      "put": {
        "tags": [
          "dummy"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "accept",
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "samples/simple/dummy/{id}/query": {
      "put": {
        "tags": [
          "dummy"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "q",
            "in": "query",
            "required": false,
            "schema": {
              "description": "query",
              "type": "string"
            }
          }
        ]
      }
    },
    "samples/simple/dummy/{id}/simple": {
      "put": {
        "tags": [
          "dummy"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ]
      }
    },
    "samples/simple/file/{id}/upload": {
      "post": {
        "tags": [
          "file"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "path",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/File"
                  },
                  {
                    "$ref": "#/components/schemas/ReadStream"
                  }
                ]
              }
            }
          }
        }
      }
    },
    "samples/simple/user/{id}/2": {
      "get": {
        "tags": [
          "user"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "path",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "123456789123456789123456789123456789",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "accept",
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "ID",
                      "type": "number"
                    },
                    "name": {
                      "description": "NAME",
                      "type": "string"
                    }
                  },
                  "required": [
                    "id",
                    "name"
                  ]
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "user"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "path",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "123456789123456789123456789123456789",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "accept",
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "ID",
                      "type": "number"
                    },
                    "name": {
                      "description": "NAME",
                      "type": "string"
                    }
                  },
                  "required": [
                    "id"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "samples/simple/user/{id}/abc": {
      "get": {
        "tags": [
          "user"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "q",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "samples/simple/user/{id}": {
      "get": {
        "tags": [
          "user"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ]
      },
      "patch": {
        "tags": [
          "user"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ]
      },
      "delete": {
        "tags": [
          "user"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ]
      }
    },
    "samples/simple/user/{id}/xyz": {
      "get": {
        "tags": [
          "user"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ]
      },
      "put": {
        "tags": [
          "user"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "File": {
        "type": "object",
        "properties": {
          "lastModified": {
            "type": "number"
          },
          "name": {
            "type": "string"
          },
          "webkitRelativePath": {
            "type": "string"
          },
          "size": {
            "type": "number"
          },
          "type": {
            "type": "string"
          }
        },
        "required": [
          "lastModified",
          "name",
          "size",
          "type",
          "webkitRelativePath"
        ]
      },
      "ReadStream": {
        "description": "Instances of `fs.ReadStream` are created and returned using the {@link createReadStream} function.",
        "type": "object",
        "properties": {
          "bytesRead": {
            "description": "The number of bytes that have been read so far.",
            "type": "number"
          },
          "path": {
            "description": "The path to the file the stream is reading from as specified in the first\nargument to `fs.createReadStream()`. If `path` is passed as a string, then`readStream.path` will be a string. If `path` is passed as a `Buffer`, then`readStream.path` will be a\n`Buffer`. If `fd` is specified, then`readStream.path` will be `undefined`.",
            "anyOf": [
              {
                "type": "object",
                "additionalProperties": false,
                "patternProperties": {
                  "^[0-9]+$": {
                    "type": "number"
                  }
                },
                "properties": {
                  "BYTES_PER_ELEMENT": {
                    "type": "number"
                  },
                  "buffer": {
                    "$ref": "#/components/schemas/ArrayBufferLike"
                  },
                  "byteLength": {
                    "type": "number"
                  },
                  "byteOffset": {
                    "type": "number"
                  },
                  "length": {
                    "type": "number"
                  },
                  "__@toStringTag@46242": {
                    "type": "string",
                    "const": "Uint8Array"
                  }
                },
                "required": [
                  "BYTES_PER_ELEMENT",
                  "__@toStringTag@46242",
                  "buffer",
                  "byteLength",
                  "byteOffset",
                  "length"
                ]
              },
              {
                "type": "string"
              }
            ]
          },
          "pending": {
            "description": "This property is `true` if the underlying file has not been opened yet,\ni.e. before the `'ready'` event is emitted.",
            "type": "boolean"
          },
          "readableAborted": {
            "description": "Returns whether the stream was destroyed or errored before emitting `'end'`.",
            "type": "boolean"
          },
          "readable": {
            "description": "Is `true` if it is safe to call {@link read}, which means\nthe stream has not been destroyed or emitted `'error'` or `'end'`.",
            "type": "boolean"
          },
          "readableDidRead": {
            "description": "Returns whether `'data'` has been emitted.",
            "type": "boolean"
          },
          "readableEncoding": {
            "description": "Getter for the property `encoding` of a given `Readable` stream. The `encoding` property can be set using the {@link setEncoding} method.",
            "anyOf": [
              {
                "enum": [
                  "ascii",
                  "base64",
                  "base64url",
                  "binary",
                  "hex",
                  "latin1",
                  "ucs-2",
                  "ucs2",
                  "utf-16le",
                  "utf-8",
                  "utf16le",
                  "utf8"
                ],
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "readableEnded": {
            "description": "Becomes `true` when [`'end'`](https://nodejs.org/docs/latest-v22.x/api/stream.html#event-end) event is emitted.",
            "type": "boolean"
          },
          "readableFlowing": {
            "description": "This property reflects the current state of a `Readable` stream as described\nin the [Three states](https://nodejs.org/docs/latest-v22.x/api/stream.html#three-states) section.",
            "type": [
              "null",
              "boolean"
            ]
          },
          "readableHighWaterMark": {
            "description": "Returns the value of `highWaterMark` passed when creating this `Readable`.",
            "type": "number"
          },
          "readableLength": {
            "description": "This property contains the number of bytes (or objects) in the queue\nready to be read. The value provides introspection data regarding\nthe status of the `highWaterMark`.",
            "type": "number"
          },
          "readableObjectMode": {
            "description": "Getter for the property `objectMode` of a given `Readable` stream.",
            "type": "boolean"
          },
          "destroyed": {
            "description": "Is `true` after `readable.destroy()` has been called.",
            "type": "boolean"
          },
          "closed": {
            "description": "Is `true` after `'close'` has been emitted.",
            "type": "boolean"
          },
          "errored": {
            "description": "Returns error if the stream has been destroyed with an error.",
            "anyOf": [
              {
                "$ref": "#/components/schemas/Error"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "required": [
          "bytesRead",
          "closed",
          "destroyed",
          "errored",
          "path",
          "pending",
          "readable",
          "readableAborted",
          "readableDidRead",
          "readableEncoding",
          "readableEnded",
          "readableFlowing",
          "readableHighWaterMark",
          "readableLength",
          "readableObjectMode"
        ]
      },
      "ArrayBufferLike": {
        "anyOf": [
          {
            "$ref": "#/components/schemas/ArrayBuffer"
          },
          {
            "$ref": "#/components/schemas/SharedArrayBuffer"
          }
        ]
      },
      "ArrayBuffer": {
        "type": "object",
        "properties": {
          "byteLength": {
            "type": "number"
          },
          "__@toStringTag@46242": {
            "type": "string"
          }
        },
        "required": [
          "__@toStringTag@46242",
          "byteLength"
        ]
      },
      "SharedArrayBuffer": {
        "type": "object",
        "properties": {
          "byteLength": {
            "type": "number"
          },
          "__@species@46700": {
            "$ref": "#/components/schemas/SharedArrayBuffer"
          },
          "__@toStringTag@46242": {
            "type": "string",
            "const": "SharedArrayBuffer"
          }
        },
        "required": [
          "__@species@46700",
          "__@toStringTag@46242",
          "byteLength"
        ]
      },
      "Error": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "stack": {
            "type": "string"
          },
          "cause": {}
        },
        "required": [
          "message",
          "name"
        ]
      }
    }
  }
}